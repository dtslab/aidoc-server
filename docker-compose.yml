# docker-compose.yml
version: "3.9"

services:
  aidoc-server:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=${POSTGRES_PORT}
      - CLERK_PUBLISHABLE_KEY=${CLERK_PUBLISHABLE_KEY}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - RENDER_EXTERNAL_URL=${RENDER_EXTERNAL_URL}
      - GIN_MODE=${GIN_MODE}
      - SENTRY_DSN=${SENTRY_DSN} # Include Sentry if used
    depends_on:
      - postgres
    volumes:
      - .:/app # Mount for live reloading during development

  postgres:
    image: postgres:15-alpine
    restart: always # Ensure Postgres restarts automatically
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}" # Exposed port if local access
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck: # Ensure the database is healthy.
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  db_data:
