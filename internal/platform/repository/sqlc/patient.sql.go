// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: patient.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createPatient = `-- name: CreatePatient :one
INSERT INTO patients (user_id, full_name, age, date_of_birth, sex, phone_number, email_address, preferred_communication, socioeconomic_status, geographic_location)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING patient_id, user_id, full_name, age, date_of_birth, sex, phone_number, email_address, preferred_communication, socioeconomic_status, geographic_location, created_at, updated_at
`

type CreatePatientParams struct {
	UserID                 sql.NullInt32                  `json:"user_id"`
	FullName               string                         `json:"full_name"`
	Age                    sql.NullInt32                  `json:"age"`
	DateOfBirth            time.Time                      `json:"date_of_birth"`
	Sex                    SexEnum                        `json:"sex"`
	PhoneNumber            sql.NullString                 `json:"phone_number"`
	EmailAddress           sql.NullString                 `json:"email_address"`
	PreferredCommunication NullPreferredCommunicationEnum `json:"preferred_communication"`
	SocioeconomicStatus    NullSocioeconomicStatusEnum    `json:"socioeconomic_status"`
	GeographicLocation     sql.NullString                 `json:"geographic_location"`
}

func (q *Queries) CreatePatient(ctx context.Context, arg CreatePatientParams) (Patient, error) {
	row := q.db.QueryRowContext(ctx, createPatient,
		arg.UserID,
		arg.FullName,
		arg.Age,
		arg.DateOfBirth,
		arg.Sex,
		arg.PhoneNumber,
		arg.EmailAddress,
		arg.PreferredCommunication,
		arg.SocioeconomicStatus,
		arg.GeographicLocation,
	)
	var i Patient
	err := row.Scan(
		&i.PatientID,
		&i.UserID,
		&i.FullName,
		&i.Age,
		&i.DateOfBirth,
		&i.Sex,
		&i.PhoneNumber,
		&i.EmailAddress,
		&i.PreferredCommunication,
		&i.SocioeconomicStatus,
		&i.GeographicLocation,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPatient = `-- name: GetPatient :one
SELECT patient_id, user_id, full_name, age, date_of_birth, sex, phone_number, email_address, preferred_communication, socioeconomic_status, geographic_location, created_at, updated_at
FROM patients
WHERE patient_id = $1
`

func (q *Queries) GetPatient(ctx context.Context, patientID int32) (Patient, error) {
	row := q.db.QueryRowContext(ctx, getPatient, patientID)
	var i Patient
	err := row.Scan(
		&i.PatientID,
		&i.UserID,
		&i.FullName,
		&i.Age,
		&i.DateOfBirth,
		&i.Sex,
		&i.PhoneNumber,
		&i.EmailAddress,
		&i.PreferredCommunication,
		&i.SocioeconomicStatus,
		&i.GeographicLocation,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePatient = `-- name: UpdatePatient :one
UPDATE patients
SET full_name = $2,
    age = $3,
    date_of_birth = $4,
    sex = $5,
    phone_number = $6,
    email_address = $7,
    preferred_communication = $8,
    socioeconomic_status = $9,
    geographic_location = $10,
    updated_at = NOW()
WHERE patient_id = $1
RETURNING patient_id, user_id, full_name, age, date_of_birth, sex, phone_number, email_address, preferred_communication, socioeconomic_status, geographic_location, created_at, updated_at
`

type UpdatePatientParams struct {
	PatientID              int32                          `json:"patient_id"`
	FullName               string                         `json:"full_name"`
	Age                    sql.NullInt32                  `json:"age"`
	DateOfBirth            time.Time                      `json:"date_of_birth"`
	Sex                    SexEnum                        `json:"sex"`
	PhoneNumber            sql.NullString                 `json:"phone_number"`
	EmailAddress           sql.NullString                 `json:"email_address"`
	PreferredCommunication NullPreferredCommunicationEnum `json:"preferred_communication"`
	SocioeconomicStatus    NullSocioeconomicStatusEnum    `json:"socioeconomic_status"`
	GeographicLocation     sql.NullString                 `json:"geographic_location"`
}

func (q *Queries) UpdatePatient(ctx context.Context, arg UpdatePatientParams) (Patient, error) {
	row := q.db.QueryRowContext(ctx, updatePatient,
		arg.PatientID,
		arg.FullName,
		arg.Age,
		arg.DateOfBirth,
		arg.Sex,
		arg.PhoneNumber,
		arg.EmailAddress,
		arg.PreferredCommunication,
		arg.SocioeconomicStatus,
		arg.GeographicLocation,
	)
	var i Patient
	err := row.Scan(
		&i.PatientID,
		&i.UserID,
		&i.FullName,
		&i.Age,
		&i.DateOfBirth,
		&i.Sex,
		&i.PhoneNumber,
		&i.EmailAddress,
		&i.PreferredCommunication,
		&i.SocioeconomicStatus,
		&i.GeographicLocation,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
