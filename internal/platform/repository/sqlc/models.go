// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type PreferredCommunicationEnum string

const (
	PreferredCommunicationEnumPhone PreferredCommunicationEnum = "Phone"
	PreferredCommunicationEnumEmail PreferredCommunicationEnum = "Email"
	PreferredCommunicationEnumText  PreferredCommunicationEnum = "Text"
)

func (e *PreferredCommunicationEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PreferredCommunicationEnum(s)
	case string:
		*e = PreferredCommunicationEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for PreferredCommunicationEnum: %T", src)
	}
	return nil
}

type NullPreferredCommunicationEnum struct {
	PreferredCommunicationEnum PreferredCommunicationEnum `json:"preferred_communication_enum"`
	Valid                      bool                       `json:"valid"` // Valid is true if PreferredCommunicationEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPreferredCommunicationEnum) Scan(value interface{}) error {
	if value == nil {
		ns.PreferredCommunicationEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PreferredCommunicationEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPreferredCommunicationEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PreferredCommunicationEnum), nil
}

type SexEnum string

const (
	SexEnumMale   SexEnum = "Male"
	SexEnumFemale SexEnum = "Female"
	SexEnumOther  SexEnum = "Other"
)

func (e *SexEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SexEnum(s)
	case string:
		*e = SexEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for SexEnum: %T", src)
	}
	return nil
}

type NullSexEnum struct {
	SexEnum SexEnum `json:"sex_enum"`
	Valid   bool    `json:"valid"` // Valid is true if SexEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSexEnum) Scan(value interface{}) error {
	if value == nil {
		ns.SexEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SexEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSexEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SexEnum), nil
}

type SocioeconomicStatusEnum string

const (
	SocioeconomicStatusEnumLow             SocioeconomicStatusEnum = "Low"
	SocioeconomicStatusEnumMiddle          SocioeconomicStatusEnum = "Middle"
	SocioeconomicStatusEnumHigh            SocioeconomicStatusEnum = "High"
	SocioeconomicStatusEnumDeclinetoAnswer SocioeconomicStatusEnum = "Decline to Answer"
)

func (e *SocioeconomicStatusEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SocioeconomicStatusEnum(s)
	case string:
		*e = SocioeconomicStatusEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for SocioeconomicStatusEnum: %T", src)
	}
	return nil
}

type NullSocioeconomicStatusEnum struct {
	SocioeconomicStatusEnum SocioeconomicStatusEnum `json:"socioeconomic_status_enum"`
	Valid                   bool                    `json:"valid"` // Valid is true if SocioeconomicStatusEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSocioeconomicStatusEnum) Scan(value interface{}) error {
	if value == nil {
		ns.SocioeconomicStatusEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SocioeconomicStatusEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSocioeconomicStatusEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SocioeconomicStatusEnum), nil
}

type Patient struct {
	PatientID              int32                          `json:"patient_id"`
	UserID                 sql.NullInt32                  `json:"user_id"`
	FullName               string                         `json:"full_name"`
	Age                    sql.NullInt32                  `json:"age"`
	DateOfBirth            time.Time                      `json:"date_of_birth"`
	Sex                    SexEnum                        `json:"sex"`
	PhoneNumber            sql.NullString                 `json:"phone_number"`
	EmailAddress           sql.NullString                 `json:"email_address"`
	PreferredCommunication NullPreferredCommunicationEnum `json:"preferred_communication"`
	SocioeconomicStatus    NullSocioeconomicStatusEnum    `json:"socioeconomic_status"`
	GeographicLocation     sql.NullString                 `json:"geographic_location"`
	CreatedAt              sql.NullTime                   `json:"created_at"`
	UpdatedAt              sql.NullTime                   `json:"updated_at"`
}

type PatientLifestyle struct {
	PatientLifestyleID int32          `json:"patient_lifestyle_id"`
	PatientID          int32          `json:"patient_id"`
	LifestyleFactor    string         `json:"lifestyle_factor"`
	Value              sql.NullString `json:"value"`
	StartDate          sql.NullTime   `json:"start_date"`
	EndDate            sql.NullTime   `json:"end_date"`
	CreatedAt          sql.NullTime   `json:"created_at"`
	UpdatedAt          sql.NullTime   `json:"updated_at"`
}

type PatientMedicalHistory struct {
	PatientMedicalHistoryID int32          `json:"patient_medical_history_id"`
	PatientID               sql.NullInt32  `json:"patient_id"`
	Condition               string         `json:"condition"`
	DiagnosisDate           sql.NullTime   `json:"diagnosis_date"`
	Status                  sql.NullString `json:"status"`
	Details                 sql.NullString `json:"details"`
	CreatedAt               sql.NullTime   `json:"created_at"`
	UpdatedAt               sql.NullTime   `json:"updated_at"`
}
