// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: medical_history.sql

package db

import (
	"context"
	"database/sql"
)

const createMedicalHistoryEntry = `-- name: CreateMedicalHistoryEntry :one
INSERT INTO patient_medical_history (patient_id, condition, diagnosis_date, status, details)
VALUES ($1, $2, $3, $4, $5)
RETURNING patient_medical_history_id, patient_id, condition, diagnosis_date, status, details, created_at, updated_at
`

type CreateMedicalHistoryEntryParams struct {
	PatientID     sql.NullInt32  `json:"patient_id"`
	Condition     string         `json:"condition"`
	DiagnosisDate sql.NullTime   `json:"diagnosis_date"`
	Status        sql.NullString `json:"status"`
	Details       sql.NullString `json:"details"`
}

func (q *Queries) CreateMedicalHistoryEntry(ctx context.Context, arg CreateMedicalHistoryEntryParams) (PatientMedicalHistory, error) {
	row := q.db.QueryRowContext(ctx, createMedicalHistoryEntry,
		arg.PatientID,
		arg.Condition,
		arg.DiagnosisDate,
		arg.Status,
		arg.Details,
	)
	var i PatientMedicalHistory
	err := row.Scan(
		&i.PatientMedicalHistoryID,
		&i.PatientID,
		&i.Condition,
		&i.DiagnosisDate,
		&i.Status,
		&i.Details,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMedicalHistoryEntry = `-- name: DeleteMedicalHistoryEntry :exec
DELETE FROM patient_medical_history
WHERE patient_medical_history_id = $1
`

func (q *Queries) DeleteMedicalHistoryEntry(ctx context.Context, patientMedicalHistoryID int32) error {
	_, err := q.db.ExecContext(ctx, deleteMedicalHistoryEntry, patientMedicalHistoryID)
	return err
}

const getMedicalHistoryEntries = `-- name: GetMedicalHistoryEntries :many
SELECT patient_medical_history_id, patient_id, condition, diagnosis_date, status, details, created_at, updated_at
FROM patient_medical_history
WHERE patient_id = $1
`

func (q *Queries) GetMedicalHistoryEntries(ctx context.Context, patientID sql.NullInt32) ([]PatientMedicalHistory, error) {
	rows, err := q.db.QueryContext(ctx, getMedicalHistoryEntries, patientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PatientMedicalHistory{}
	for rows.Next() {
		var i PatientMedicalHistory
		if err := rows.Scan(
			&i.PatientMedicalHistoryID,
			&i.PatientID,
			&i.Condition,
			&i.DiagnosisDate,
			&i.Status,
			&i.Details,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMedicalHistoryEntry = `-- name: GetMedicalHistoryEntry :one
SELECT patient_medical_history_id, patient_id, condition, diagnosis_date, status, details, created_at, updated_at
FROM patient_medical_history
WHERE patient_medical_history_id = $1
`

func (q *Queries) GetMedicalHistoryEntry(ctx context.Context, patientMedicalHistoryID int32) (PatientMedicalHistory, error) {
	row := q.db.QueryRowContext(ctx, getMedicalHistoryEntry, patientMedicalHistoryID)
	var i PatientMedicalHistory
	err := row.Scan(
		&i.PatientMedicalHistoryID,
		&i.PatientID,
		&i.Condition,
		&i.DiagnosisDate,
		&i.Status,
		&i.Details,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateMedicalHistoryEntry = `-- name: UpdateMedicalHistoryEntry :one
UPDATE patient_medical_history
SET condition = $2,
    diagnosis_date = $3,
    status = $4,
    details = $5,
    updated_at = NOW()
WHERE patient_medical_history_id = $1
RETURNING patient_medical_history_id, patient_id, condition, diagnosis_date, status, details, created_at, updated_at
`

type UpdateMedicalHistoryEntryParams struct {
	PatientMedicalHistoryID int32          `json:"patient_medical_history_id"`
	Condition               string         `json:"condition"`
	DiagnosisDate           sql.NullTime   `json:"diagnosis_date"`
	Status                  sql.NullString `json:"status"`
	Details                 sql.NullString `json:"details"`
}

func (q *Queries) UpdateMedicalHistoryEntry(ctx context.Context, arg UpdateMedicalHistoryEntryParams) (PatientMedicalHistory, error) {
	row := q.db.QueryRowContext(ctx, updateMedicalHistoryEntry,
		arg.PatientMedicalHistoryID,
		arg.Condition,
		arg.DiagnosisDate,
		arg.Status,
		arg.Details,
	)
	var i PatientMedicalHistory
	err := row.Scan(
		&i.PatientMedicalHistoryID,
		&i.PatientID,
		&i.Condition,
		&i.DiagnosisDate,
		&i.Status,
		&i.Details,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
